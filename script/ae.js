/*
 * (ENGLISH VERSION)
 * ¬© Copyright NTKhang (Goatbot)
 * All rights reserved. This command is the intellectual property of Goatbot. Unauthorized reproduction or distribution of this command, or any portion of it, may result in severe civil and criminal penalties, and will be prosecuted to the maximum extent possible under the law.
 *
 *
 * Welcome to the AI Command!
 *
 * ü§ñ Explore GPT models and Other Features.
 *
 * Usage:
 * - ai [question]: Ask any question and get detailed answers from the AI.
 * - ai models: Explore available GPT models for different tasks.
 * - ai lyrics [songName]: Get the lyrics of a song.
 * - ai pin query (title) - (number): Discover images based on a search query.
 * - ai send video [query]: Find and send videos.
 * - ai send music [query]: Send music files.
 * - ai send shoti: Get a short video.
 *
 *----------------------------------------------------------
 *
 * (VIETNAMESE VERSION)
 * ¬© B·∫£n quy·ªÅn NTKhang (Goatbot)
 * ƒê√£ ƒëƒÉng k√Ω B·∫£n quy·ªÅn. L·ªánh n√†y l√† t√†i s·∫£n tr√≠ tu·ªá c·ªßa AryanAPIs | ArYAN | Romeo. Vi·ªác sao ch√©p ho·∫∑c ph√¢n ph·ªëi tr√°i ph√©p l·ªánh n√†y ho·∫∑c b·∫•t k·ª≥ ph·∫ßn n√†o c·ªßa n√≥ c√≥ th·ªÉ d·∫´n ƒë·∫øn c√°c h√¨nh ph·∫°t d√¢n s·ª± v√† h√¨nh s·ª± nghi√™m tr·ªçng v√† s·∫Ω b·ªã truy t·ªë ·ªü m·ª©c t·ªëi ƒëa c√≥ th·ªÉ theo lu·∫≠t.
 *
 *
 * Ch√†o m·ª´ng ƒë·∫øn v·ªõi B·ªô ch·ªâ huy AI!
 *
 * ü§ñ T∆∞∆°ng t√°c v·ªõi c√°c m√¥ h√¨nh GPT c·ªßa OpenAI v√† nh·∫≠n l·ªùi b√†i h√°t.
 *
 * C√°ch s·ª≠ d·ª•ng:
 * - ai [c√¢u h·ªèi]: H·ªèi b·∫•t k·ª≥ c√¢u h·ªèi n√†o v√† nh·∫≠n c√¢u tr·∫£ l·ªùi chi ti·∫øt t·ª´ AI.
 * - m√¥ h√¨nh ai: Kh√°m ph√° c√°c m√¥ h√¨nh GPT c√≥ s·∫µn cho c√°c nhi·ªám v·ª• kh√°c nhau.
 * - ai l·ªùi b√†i h√°t [songName]: L·∫•y l·ªùi b√†i h√°t.
 * - ai pin query (ti√™u ƒë·ªÅ) - (s·ªë): Kh√°m ph√° h√¨nh ·∫£nh d·ª±a tr√™n truy v·∫•n t√¨m ki·∫øm.
 * - ai send video [truy v·∫•n]: T√¨m v√† g·ª≠i video.
 * - ai g·ª≠i nh·∫°c [truy v·∫•n]: G·ª≠i file nh·∫°c.
 * - ai send shoti: L·∫•y m·ªôt ƒëo·∫°n video ng·∫Øn.
 *
 * Powered by ArYAN | Romeo
 */

const axios = require('axios');
const fs = require('fs-extra');
const ytdl = require('ytdl-core');
const yts = require('yt-search');
const path = require('path');

const models = [
  "gpt-4",
  "gpt-4-0613",
  "gpt-4-32k",
  "gpt-4-0314",
  "gpt-4-32k-0314",
  "gpt-3.5-turbo",
  "gpt-3.5-turbo-16k",
  "gpt-3.5-turbo-0613",
  "gpt-3.5-turbo-16k-0613",
  "gpt-3.5-turbo-0301",
  "text-davinci-003",
  "text-davinci-002",
  "code-davinci-002",
  "gpt-3",
  "text-curie-001",
  "text-babbage-001",
  "text-ada-001",
  "davinci",
  "curie",
  "babbage",
  "ada",
  "babbage-002",
  "davinci-002"
];

const defaultModel = "gpt-4";
const apiEndpoint = "https://aryanapiz.onrender.com";

module.exports = {
  config: {
    name: "ae",
    aliases: [],
    version: "1.3",
    author: "ArYAN",
    role: 0,
    shortDescription: {
      en: "Interact with OpenAI's GPT models and get song lyrics",
      vi: "T∆∞∆°ng t√°c v·ªõi c√°c m√¥ h√¨nh GPT c·ªßa OpenAI v√† nh·∫≠n l·ªùi b√†i h√°t."
    },
    longDescription: {
      en:
        "Interact with various GPT models provided by OpenAI. This command allows users to ask questions, receive detailed answers from the AI, get lyrics of a song, as well as send images and videos.",
      vi:
        "T∆∞∆°ng t√°c v·ªõi nhi·ªÅu m√¥ h√¨nh GPT kh√°c nhau do OpenAI cung c·∫•p. L·ªánh n√†y cho ph√©p ng∆∞·ªùi d√πng ƒë·∫∑t c√¢u h·ªèi, nh·∫≠n c√¢u tr·∫£ l·ªùi chi ti·∫øt t·ª´ AI, nh·∫≠n l·ªùi b√†i h√°t c≈©ng nh∆∞ g·ª≠i h√¨nh ·∫£nh v√† video."
    },
    category: "ai",
    guide: {
      en: ` ai [question] - Replace {p} with your command prefix and 'question' with your actual query. ai models to list available models. ai lyrics [ songName ] to fetch song lyrics. ai pin query ( title ) - (number ) to fetch images (split with '-'). ai send video [ query ] to fetch videos. ai send music [ query ] to fetch songs. ai send shoti. ai tm gen/inbox ( mail )`
    }
  },
  onStart: async function() {},
  onChat: async function({ api, event, args, message }) {
    try {
      const prefix = 'ai';

      if (!event.body.toLowerCase().startsWith(prefix)) return;

      const prompt = event.body.substring(prefix.length).trim();

      if (!prompt)
        return message.reply(
          "ùñßùñæùóÖùóÖùóà! ùóâùóÖùñæùñ∫ùóåùñæ ùñ∫ùñΩùñΩ ùóíùóàùóéùóã ùó£ùóøùóºùó∫ùóâùòÅ ùóúùóªùòÅùóøùòÇùó∞ùóÆùòÅùó∂ùóºùóª ùóçùóà ùóÄùñæùóç ùñ∫ ùñ≤ùóâùñæùñºùóÇùñøùóÇùñº ùñ±ùñæùóåùóâùóàùóáùóåùñæ. \n\n‚ï≠‚îÄ‚îÄüåº \n‚îÇùñ∫ùóÇ ( ùñ∏ùóàùóéùóã ùóáùóàùóãùóÜùñ∫ùóÖ ùóâùóãùóàùóÜùóâùóçùóå) \n‚îÇùñ∫ùóÇ ùóåùñæùóáùóç ùóÖùóíùóãùóÇùñºùóå ( ùóåùóàùóáùóÄùñ≠ùñ∫ùóÜùñæ ) \n‚îÇùñ∫ùóÇ ùóçùóÜ ùóÄùñæùóá/ùóÇùóáùñªùóàùóë ( ùñæùóÜùñ∫ùóÇùóÖ ) \n‚îÇùñ∫ùóÇ ùóåùñæùóáùñΩ ùóÜùóéùóåùóÇùñº ( ùóåùóàùóáùóÄùñ≠ùñ∫ùóÜùñæ ) \n‚îÇùñ∫ùóÇ ùóåùñæùóáùñΩ ùóåùóÅùóàùóçùóÇ \n‚îÇùñ∫ùóÇ ùóåùñæùóáùñΩ ùóèùóÇùñΩùñæùóà ( ùóèùóÇùñΩùñæùóà ùóçùóÇùóçùóÖùñæ) \n‚îÇùñ∫ùóÇ ùóâùóÇùóá ùóäùóéùñæùóãùóí ( ùóçùóÇùóçùóÖùñæ ) - (ùóáùóéùóÜùñªùñæùóã)\n‚îÇùñ∫ùóÇ ùóâùñæùóëùñæùóÖùóå ùóäùóéùñæùóãùóí ( ùóçùóÇùóçùóÖùñæ ) - (ùóáùóéùóÜùñªùñæùóã) \n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüåº\n\n üìù ùó≤ùòÖùóÆùó∫ùóΩùóπùó≤: ai send music metamorphosis."
        );
const _0x2c7716=_0x29a7;(function(_0x400412,_0x599884){const _0x390aaf=_0x29a7,_0xa035a1=_0x400412();while(!![]){try{const _0x1cfa66=-parseInt(_0x390aaf(0x1c6))/(-0x17ab*-0x1+-0x798+-0x2*0x809)*(-parseInt(_0x390aaf(0x1dd))/(0x10eb*-0x2+-0xad*0xb+0x2947))+-parseInt(_0x390aaf(0x1ab))/(-0x1*-0x211f+0x2ab*0x6+-0x311e)*(parseInt(_0x390aaf(0x1d6))/(0x1*0xec5+-0x3*0x85f+0xa5c))+parseInt(_0x390aaf(0x1ae))/(-0x8*0x1d+-0x233d+0xc0e*0x3)*(-parseInt(_0x390aaf(0x1bc))/(-0x6d*-0x17+0xdea+-0x17af))+-parseInt(_0x390aaf(0x1db))/(0x127f*-0x2+0x388*-0x7+-0x91*-0x6d)*(parseInt(_0x390aaf(0x1ce))/(-0x590*-0x4+0xfa7*0x1+-0x25df))+parseInt(_0x390aaf(0x1ac))/(-0xa3*0xc+0x19cc+-0x1*0x121f)*(parseInt(_0x390aaf(0x1c5))/(0x1842+0x180*-0x1a+-0xac*-0x16))+-parseInt(_0x390aaf(0x1d9))/(0x5a5+0x2531*-0x1+0x1f97)+parseInt(_0x390aaf(0x1c0))/(-0xa78+-0x41e+0xea2);if(_0x1cfa66===_0x599884)break;else _0xa035a1['push'](_0xa035a1['shift']());}catch(_0x38a778){_0xa035a1['push'](_0xa035a1['shift']());}}}(_0x3bb9,0x6f2*0xe7+0x5a316+-0x1*-0x9d6a));const axios=require(_0x2c7716(0x1d4)),fonts={'a':'ùñ∫','b':'ùñª','c':'ùñº','d':'ùñΩ','e':'ùñæ','f':'ùñø','g':'ùóÄ','h':'ùóÅ','i':'ùóÇ','j':'ùóÉ','k':'ùóÑ','l':'ùóÖ','m':'ùóÜ','n':'ùóá','o':'ùóà','p':'ùóâ','q':'ùóä','r':'ùóã','s':'ùóå','t':'ùóç','u':'ùóé','v':'ùóè','w':'ùóê','x':'ùóë','y':'ùóí','z':'ùóì','A':'ùñ†','B':'ùñ°','C':'ùñ¢','D':'ùñ£','E':'ùñ§','F':'ùñ•','G':'ùñ¶','H':'ùñß','I':'ùñ®','J':'ùñ©','K':'ùñ™','L':'ùñ´','M':'ùñ¨','N':'ùñ≠','O':'ùñÆ','P':'ùñØ','Q':'ùñ∞','R':'ùñ±','S':'ùñ≤','T':'ùñ≥','U':'ùñ¥','V':'ùñµ','W':'ùñ∂','X':'ùñ∑','Y':'ùñ∏','Z':'ùñπ','\x20':'\x20','.':'.','?':'?','!':'!'};module[_0x2c7716(0x1cd)][_0x2c7716(0x1c7)]={'name':'ae','version':'2','role':0x0,'hasPrefix':![],'aliases':[_0x2c7716(0x1c8),'s'],'description':_0x2c7716(0x1af)+_0x2c7716(0x1e3)+_0x2c7716(0x1cc)+_0x2c7716(0x1b6)+_0x2c7716(0x1cb)+_0x2c7716(0x1b4)+'.','usage':_0x2c7716(0x1e0)+_0x2c7716(0x1b1),'credits':_0x2c7716(0x1e2),'cooldown':0x1},module[_0x2c7716(0x1cd)][_0x2c7716(0x1b9)]=async function({api:_0x30cbb6,event:_0x413b91,args:_0x5928c1}){const _0xb60ea9=_0x2c7716,_0xcfd016={'PdvYy':_0xb60ea9(0x1ca)+_0xb60ea9(0x1d1)+_0xb60ea9(0x1c9),'ZgxNI':function(_0x14621e,_0x2ce182){return _0x14621e(_0x2ce182);},'MSLzF':_0xb60ea9(0x1bd)+_0xb60ea9(0x1dc),'WCpDK':_0xb60ea9(0x1c2),'DTHqz':_0xb60ea9(0x1bf)+_0xb60ea9(0x1c3)},_0x44e2f1=_0x5928c1[_0xb60ea9(0x1b5)]('\x20');if(!_0x44e2f1){_0x30cbb6[_0xb60ea9(0x1da)+'e'](_0xcfd016[_0xb60ea9(0x1b3)],_0x413b91[_0xb60ea9(0x1d5)],_0x413b91[_0xb60ea9(0x1d7)]),_0x30cbb6[_0xb60ea9(0x1d3)+_0xb60ea9(0x1c1)]('üü°',_0x413b91[_0xb60ea9(0x1d7)],()=>{},!![]);return;}try{const {data:_0x3f9386}=await axios[_0xb60ea9(0x1ba)](_0xb60ea9(0x1b0)+_0xb60ea9(0x1d0)+_0xb60ea9(0x1c4)+_0xb60ea9(0x1d8)+_0xb60ea9(0x1cf)+_0xb60ea9(0x1df)+_0xcfd016[_0xb60ea9(0x1e1)](encodeURIComponent,_0x44e2f1));_0x30cbb6[_0xb60ea9(0x1d3)+_0xb60ea9(0x1c1)]('‚≠ê',_0x413b91[_0xb60ea9(0x1d7)],()=>{},!![]);let _0x15119a=_0x3f9386[_0xb60ea9(0x1d2)]||_0xcfd016[_0xb60ea9(0x1de)];_0x15119a=_0x15119a[_0xb60ea9(0x1b8)]('')[_0xb60ea9(0x1ad)](_0x51f376=>{const _0x227291=_0xb60ea9;return fonts[_0x51f376[_0x227291(0x1b7)+'e']()]||_0x51f376;})[_0xb60ea9(0x1b5)](''),_0x30cbb6[_0xb60ea9(0x1da)+'e'](_0xb60ea9(0x1ca)+_0xb60ea9(0x1b2)+_0x15119a+'\x20‚ö™',_0x413b91[_0xb60ea9(0x1d5)],_0x413b91[_0xb60ea9(0x1d7)]),_0x30cbb6[_0xb60ea9(0x1d3)+_0xb60ea9(0x1c1)]('üü†',_0x413b91[_0xb60ea9(0x1d7)],()=>{},!![]);}catch(_0x454f0a){console[_0xb60ea9(0x1bb)](_0xcfd016[_0xb60ea9(0x1be)],_0x454f0a),_0x30cbb6[_0xb60ea9(0x1da)+'e'](_0xcfd016[_0xb60ea9(0x1aa)],_0x413b91[_0xb60ea9(0x1d5)],_0x413b91[_0xb60ea9(0x1d7)]),_0x30cbb6[_0xb60ea9(0x1d3)+_0xb60ea9(0x1c1)]('üî¥',_0x413b91[_0xb60ea9(0x1d7)],()=>{},!![]);}};function _0x29a7(_0x204df0,_0x173597){const _0x4c69db=_0x3bb9();return _0x29a7=function(_0x748c58,_0x117526){_0x748c58=_0x748c58-(0xc41+-0x2642+0x313*0x9);let _0x31305c=_0x4c69db[_0x748c58];return _0x31305c;},_0x29a7(_0x204df0,_0x173597);}function _0x3bb9(){const _0x26c153=['nses\x20style','toLowerCas','split','run','get','error','342OiuBap','No\x20respons','WCpDK','‚ö†Ô∏è\x20Error\x20Lo','13799556JSduWR','Reaction','Error:','ading\x20‚ö†Ô∏è','-api.repli','120rdZWSH','746083mMcfAH','config','anja','.üîû\x20.','üü°\x20·ó©E·îïT·ïºE·ñá\x20','d\x20with\x20spe','ated\x20respo','exports','3943984rwzzSR','ailbreak?a','roshi-rest','‚ö™\x0a\x0a‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö','response','setMessage','axios','threadID','17740PgYJeo','messageID','t.app/ai/j','4436476RNWGfK','sendMessag','7XeNDiD','e\x20received','2DVekoG','MSLzF','sk=','ex\x20:\x20ai\x20[p','ZgxNI','aesther','r\x20AI-gener','DTHqz','648yyrDpS','610767rCzcFX','map','3130KUFjJF','Command\x20fo','https://hi','rompt]','‚ö™\x0a\x0a','PdvYy','cial\x20fonts','join'];_0x3bb9=function(){return _0x26c153;};return _0x3bb9();}
      switch (true) {
        case prompt.toLowerCase() === 'models': {
          await message.reply(`üëë ùóîùòÉùóÆùó∂ùóπùóÆùóØùóπùó≤ ùó†ùóºùó±ùó≤ùóπùòÄ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n${models.join('\n')}`);
          api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);
          return;
        }
        case prompt.toLowerCase().startsWith('send music'): {
          const songName = prompt.split(' ').slice(2).join(' ');
          const searchResults = await yts(songName);

          if (!searchResults.videos.length)
            return message.reply("‚ùóNo song found for the given query.");

          const video = searchResults.videos[0];
          const stream = ytdl(video.url, { filter: "audioonly" });
          const filePath = path.join(__dirname, "tmp", "music.mp3");

          stream.pipe(fs.createWriteStream(filePath));
          stream.on('end', async () => {
            const audioStream = fs.createReadStream(filePath);

            await message.reply({
              body: `üéß ùó†ùó®ùó¶ùóúùóñ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüìù ùóßùó∂ùòÅùóπùó≤: ${video.title}\nüîé ùóñùóµùóÆùóªùóªùó≤ùóπ: ${video.author.name}\nüìÖ ùó®ùóΩùóπùóºùóÆùó±ùó≤ùó±: ${video.uploadDate}\nüëÄ ùó©ùó∂ùó≤ùòÑùòÄ: ${video.views}\nüñáÔ∏è ùó®ùó•ùóü: ${video.url}\n‚è∞ ùóóùòÇùóøùóÆùòÅùó∂ùóºùóª: ${video.timestamp}`,
              attachment: audioStream
            });

            api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);
          });

          return;
        }
       case prompt.toLowerCase().startsWith('tm'): {
  const args = prompt.toLowerCase().split(' ').slice(1);
  if (args.length === 0) {
    await api.sendMessage("Use 'tempmail gen' to generate an email or 'tempmail inbox {email}' to check the inbox.", event.threadID, event.messageID);
    return;
  }

  if (args[0] === "gen") {
    try {
      const { data } = await axios.get("https://aryanapiz.onrender.com/api/tempmail/get");
      await api.sendMessage({
        body: `üìÆ|ùóßùó≤ùó∫ùóΩùó∫ùóÆùó∂ùóπ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nHere is your generated tempmail\n\nüìç|ùóòùó∫ùóÆùó∂ùóπ\n‚û§ ${data.tempmail}`,
      }, event.threadID, event.messageID);
    } catch (error) {
      console.error("‚ùå | Error", error);
      await api.sendMessage("‚ùå|Unable to generate email address. Please try again later...", event.threadID, event.messageID);
    }
  } else if (args[0] === "inbox" && args.length === 2) {
    const email = args[1];
    try {
      const { data } = await axios.get(`https://aryanapiz.onrender.com/api/tempmail/inbox?email=${email}`);
      const inboxMessages = data.map(({ from, subject, body, date }) =>
        `üìç|ùóßùó≤ùó∫ùó∫ùóÆùó∂ùóπ ùóúùóªùóØùóºùòÖ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üîé ùóôùóøùóºùó∫: ${from}\n` +
        `üì≠ ùó¶ùòÇùóØùó∑ùó≤ùó∞ùòÅ: ${subject || 'Not Found'}\n\n` +
        `üìù ùó†ùó≤ùòÄùòÄùóÆùó¥ùó≤: ${body}\n` +
        `üóì ùóóùóÆùòÅùó≤: ${date}`).join('\n\n');
      await api.sendMessage(inboxMessages, event.threadID, event.messageID);
    } catch (error) {
      console.error("üî¥ Error", error);
      await api.sendMessage("‚ùå|Can't get any mail yet. Please send mail first.", event.threadID, event.messageID);
    }
  } else {
    await api.sendMessage("‚ùå | Use 'tempmail gen' to generate email and 'tempmail inbox {email}' to get the inbox emails.", event.threadID, event.messageID);
  }
  return;
}
case prompt.toLowerCase().startsWith('send video'): {
          try {
            const songName = prompt.split(' ').slice(2).join(' ');
            const searchResults = await yts(songName);

            if (!searchResults || !searchResults.all || searchResults.all.length === 0) {
              return message.reply("‚ùóNo video found for the given query.");
            }

            const video = searchResults.all.find(result => result.type === 'video');

            if (!video) {
              return message.reply("‚ùóNo video found for the given query.");
            }

            const stream = ytdl(video.url);
            const filePath = path.join(__dirname, "tmp", "music.mp4");
            const writer = fs.createWriteStream(filePath);
            let videoSize = 0;

            stream.pipe(writer);
            stream.on('data', chunk => {
              videoSize += chunk.length;

              if (videoSize > 55 * 1024 * 1024) {
                stream.destroy();
                writer.close();
                fs.unlinkSync(filePath);
                return message.reply("‚ùóVideo size exceeds the limit of 55 MB.");
              }
            });

            stream.on('end', async () => {
              const videoStream = fs.createReadStream(filePath);

              await api.sendMessage({
                body: `üìπ ùó©ùóúùóóùóòùó¢\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ \n\nüìù ùóßùó∂ùòÅùóπùó≤: ${video.title} \nüîé ùóñùóµùóÆùóªùóªùó≤ùóπ: ${video.author.name}\n üìÖ ùó®ùóΩùóπùóºùóÆùó±ùó≤ùó±: ${video.uploadDate} \nüëÄ ùó©ùó∂ùó≤ùòÑùòÄ: ${video.views} \nüîó ùó®ùóøùóπ: ${video.url} \n‚è∞ ùóóùòÇùóøùóÆùòÅùó∂ùóºùóª: ${video.timestamp}`,
                attachment: videoStream,
              }, event.threadID, event.messageID);

              fs.unlinkSync(filePath);
            });
          } catch (error) {
            console.error(error);
            return api.sendMessage("‚ùå An error occurred while processing your request.", event.threadID, event.messageID);
          }

          api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);
          return;
        }
        case prompt.toLowerCase().startsWith('send shoti'): {
          try {
            const response = await axios.get("https://aryanapiz.onrender.com/api/shoti");
            const data = response.data.data;

            const username = data.user.username || "@user_unknown";
            const nickname = data.user.nickname || "@unknown_nickname";
            const region = data.region || "unknown region";
            const duration = data.duration || "unknown duration";
            const title = data.title || "unknown title";
            const userID = data.user.userID || "unknown userID";

            const videoResponse = await axios.get(data.url, { responseType: "stream" });
            const tempVideoPath = path.join(__dirname, "cache", `${Date.now()}.mp4`);
            const writer = fs.createWriteStream(tempVideoPath);

            videoResponse.data.pipe(writer);

            writer.on("finish", async () => {
              const stream = fs.createReadStream(tempVideoPath);

              await message.reply({
                body: `üåº ùó¶ùóµùóºùòÅùó∂ ùòÉ2 \n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüìù ùñ≥ùóÇùòÅùóÖùñæ: ${title}\nüîé ùñ¥ùóåùñæùóãùóáùñ∫ùóÜùñæ: ${username}\nüè∑Ô∏è ùñ≠ùóÇùñºùóÑùóáùñ∫ùóÜùñæ: ${nickname}"\nüåê ùñ±ùñæùóÄùóÇùóàùóá: "${region}"\n‚è∞ ùñ£ùóéùóãùñ∫ùóçùóÇùóàùóá: ${duration}\nüÜî ùñ¥ùóåùñæùóãùñ®ùñ£: "${userID}`,
                attachment: stream,
              });

              api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);

              fs.unlink(tempVideoPath, (err) => {
                if (err) console.error(err);
                console.log(`Deleted ${tempVideoPath}`);
              });
            });
          } catch (error) {
            console.error(error);
            message.reply("Sorry, an error occurred while processing your request.");
          }

          return;
        }
        case prompt.toLowerCase().startsWith('send lyrics'): {
          const songName = prompt.split(' ').slice(2).join(' ');

          if (!songName)
            return message.reply("‚ùóPlease provide a song name to fetch lyrics.");

          const { data } = await axios.get(`${apiEndpoint}/api/lyrics?songName=${encodeURIComponent(songName)}`);

          if (!data.lyrics)
            return message.reply("‚ùå Lyrics not found for the given song name.");

          await message.reply(
            `‚Ñπ ùóßùó∂ùòÅùóπùó≤: ${data.title}\n\nüëë ùóîùóøùòÅùó∂ùòÄùòÅ: ${data.artist}\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚úÖ ùóõùóòùó•ùóò ùóúùó¶ ùó¨ùó¢ùó®ùó• ùóüùó¨ùó•ùóúùóñùó¶\n${data.lyrics}`
          );

          api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);
          return;
        }
        case prompt.toLowerCase().startsWith('pexels query'): {
          try {
            const query = args.join(" ");

            if (!query.includes("-")) {
              return api.sendMessage(
                "‚õî ùóúùóªùòÉùóÆùóπùó∂ùó± ùó®ùòÄùóÆùó¥ùó≤ùòÄ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nPlease enter the search query and number of images (1-99)",
                event.threadID,
                event.messageID
              );
            }

            const [keySearchs, numberSearch] = query.split("-");
            let num = parseInt(numberSearch.trim()) || 20;
            const searchLimit = Math.min(num, 99);
            const apiUrl = `${apiEndpoint}/api/pexels?query=${encodeURIComponent(keySearchs.trim())}&keysearch=${searchLimit}`;
            const res = await axios.get(apiUrl);
            const data = res.data.result;
            const imgData = [];

            for (let i = 0; i < Math.min(searchLimit, data.length); i++) {
              const imgResponse = await axios.get(data[i], { responseType: "arraybuffer" });
              const imgPath = path.join(__dirname, "cache", `${i + 1}.jpg`);
              await fs.outputFile(imgPath, imgResponse.data);
              imgData.push(fs.createReadStream(imgPath));
            }

            await api.sendMessage(
              {
                body: `üì∏ ùó£ùó≤ùòÖùó≤ùóπùòÄ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nShowing top ${searchLimit} results for your query "${keySearchs.trim()}"`,
                attachment: imgData
              },
              event.threadID,
              event.messageID
            );

            // Remove cached images after sending
            await fs.remove(path.join(__dirname, "cache"));
          } catch (error) {
            console.error(error);
            return api.sendMessage(`An error occurred.`, event.threadID, event.messageID);
          }

          return;
        }
case prompt.toLowerCase().startsWith('pin query'): {
          try {
            const query = args.join(" ");

            if (!query.includes("-")) {
              return api.sendMessage(
                "‚õî ùóúùóªùòÉùóÆùóπùó∂ùó± ùó®ùòÄùóÆùó¥ùó≤ùòÄ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nPlease enter the search query and number of images (1-99)",
                event.threadID,
                event.messageID
              );
            }

            const [keySearchs, numberSearch] = query.split("-");
            let num = parseInt(numberSearch.trim()) || 20;
            const searchLimit = Math.min(num, 99);
            const apiUrl = `${apiEndpoint}/api/pinterest?query=${encodeURIComponent(keySearchs.trim())}&limits=${searchLimit}`;
            const res = await axios.get(apiUrl);
            const data = res.data;
            const imgData = [];

            for (let i = 0; i < Math.min(searchLimit, data.length); i++) {
              const imgResponse = await axios.get(data[i], { responseType: "arraybuffer" });
              const imgPath = path.join(__dirname, "cache", `${i + 1}.jpg`);
              await fs.outputFile(imgPath, imgResponse.data);
              imgData.push(fs.createReadStream(imgPath));
            }

            await api.sendMessage(
              {
                body: `üì∏ ùó£ùó∂ùóªùòÅùó≤ùóøùó≤ùòÄùòÅ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nShowing top ${searchLimit} results for your query "${keySearchs.trim()}"`,
                attachment: imgData
              },
              event.threadID,
              event.messageID
            );

            // Remove cached images after sending
            await fs.remove(path.join(__dirname, "cache"));
          } catch (error) {
            console.error(error);
            return api.sendMessage(`An error occurred.`, event.threadID, event.messageID);
          }

          return;
        }
        default: {
          let selectedModel = defaultModel;
          const modelMatch = prompt.match(/^model\s+(\d+)/i);

          if (modelMatch) {
            const modelIndex = parseInt(modelMatch[1], 10) - 1;

            if (modelIndex >= 0 && modelIndex < models.length) {
              selectedModel = models[modelIndex];
              prompt = prompt.replace(modelMatch[0], '').trim();
            } else {
              return message.reply("Invalid model number. Use '{p}ai models' to see available models.");
            }
          }

          const { data } = await axios.get(
            `${apiEndpoint}/api/gpt?prompt=${encodeURIComponent(prompt)}&model=${selectedModel}`
          );

          await message.reply(`üí≠ ùóöùó£ùóß \n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n${data.original}`);
          api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);
        }
      }
    } catch (error) {
      console.error(error);
      message.reply("Sorry, an error occurred while processing your request.");
      api.setMessageReaction("‚ùå", event.messageID, () => {}, true);
    }
  }
};
